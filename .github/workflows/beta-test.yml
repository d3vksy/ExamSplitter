name: Beta Test Build

on:
  push:
    branches:
      - BETA
  pull_request:
    branches:
      - main

jobs:
  beta-test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Test PyInstaller build
      run: |
        pyinstaller --onefile --windowed --name ExamSplitter --add-data "models;models" --add-data "banner.png;." --hidden-import ultralytics --hidden-import cv2 --hidden-import fitz --hidden-import PIL --hidden-import reportlab --hidden-import numpy --hidden-import tkinter --clean main.py
        
    - name: Verify executable
      run: |
        if (Test-Path "dist\ExamSplitter.exe") {
          echo "Build successful - ExamSplitter.exe created"
          $fileSize = (Get-Item "dist\ExamSplitter.exe").Length / 1MB
          echo "Executable size: $([math]::Round($fileSize, 2)) MB"
        } else {
          echo "Build failed - ExamSplitter.exe not found"
          exit 1
        }
        
    - name: Upload beta build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ExamSplitter-BetaBuild
        path: dist/ExamSplitter.exe
        
    - name: Comment on commit
      if: github.event_name == 'push'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const exePath = 'dist/ExamSplitter.exe';
          const fileSize = fs.existsSync(exePath) ? 
            (fs.statSync(exePath).size / (1024 * 1024)).toFixed(2) : 'N/A';
          
          const comment = `## Beta 테스트 빌드 완료
          
          **빌드 성공**
          **파일 크기**: ${fileSize} MB
          **다운로드**: Actions 탭의 Artifacts에서 다운로드 가능
          
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: comment
          }); 